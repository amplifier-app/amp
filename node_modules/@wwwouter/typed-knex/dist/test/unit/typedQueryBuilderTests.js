"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const knex_1 = require("knex");
const src_1 = require("../../src");
const decorators_1 = require("../../src/decorators");
const typedKnex_1 = require("../../src/typedKnex");
const unflatten_1 = require("../../src/unflatten");
const testEntities_1 = require("../testEntities");
describe("TypedKnexQueryBuilder", () => {
    it('should return select * from "users"', (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users"');
        done();
    });
    it('should return select "id" from "users"', (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).select("id");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "users"."id" as "id" from "users"');
        done();
    });
    it("should return camelCase correctly", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).select("initialValue");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "userSettings"."initialValue" as "initialValue" from "userSettings"');
        done();
    });
    it("should create query with where on column of own table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).where("name", "user1");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."name" = \'user1\'');
        done();
    });
    it("should create query with Date column", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).select("birthDate").where("birthDate", new Date(1979, 0, 1));
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "users"."birthDate" as "birthDate" from "users" where "users"."birthDate" = \'1979-01-01 00:00:00.000\'');
        done();
    });
    it("should create query with array column", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).select("tags").where("tags", ["tag1"]);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "users"."tags" as "tags" from "users" where "users"."tags" = \'{"tag1"}\'');
        done();
    });
    it("should create query with where on column of own table with LIKE", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).where("name", "like", "%user%");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."name" like \'%user%\'');
        done();
    });
    it("should handle nullable properties", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.query(testEntities_1.UserCategory).select("phoneNumber").where("phoneNumber", "user1").select("backupRegion.code").toQuery();
        done();
    });
    it("should handle nullable level 2 properties", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.query(testEntities_1.User).select("category.phoneNumber").where("category.phoneNumber", "user1");
        done();
    });
    it("should create query with where not on column of own table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereNot("name", "user1");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where not "users"."name" = \'user1\'');
        done();
    });
    it("should join a table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).innerJoinColumn("user");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" inner join "users" as "user" on "user"."id" = "userSettings"."userId"');
        done();
    });
    it("should join a table and select a column of joined table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).select("user.name").innerJoinColumn("user");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "user"."name" as "user.name" from "userSettings" inner join "users" as "user" on "user"."id" = "userSettings"."userId"');
        done();
    });
    it("should join a table and use where on a column of joined table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).where("user.name", "user1").innerJoinColumn("user");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" inner join "users" as "user" on "user"."id" = "userSettings"."userId" where "user"."name" = \'user1\'');
        done();
    });
    it("should join two level of tables", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).innerJoinColumn("user").innerJoinColumn("user.category");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" inner join "users" as "user" on "user"."id" = "userSettings"."userId" inner join "userCategories" as "user_category" on "user_category"."id" = "user"."categoryId"');
        done();
    });
    it("should join three level of tables", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).innerJoinColumn("user.category.region");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" inner join "regions" as "user_category_region" on "user_category_region"."id" = "user_category"."regionId"');
        done();
    });
    it("should join two levels of tables and select a column of the last joined table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).select("user.category.name").innerJoinColumn("user.category");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "user_category"."name" as "user.category.name" from "userSettings" inner join "userCategories" as "user_category" on "user_category"."id" = "user"."categoryId"');
        done();
    });
    it("should join three levels of tables and select a column of the last joined table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).select("user.category.region.code").innerJoinColumn("user.category.region");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "user_category_region"."code" as "user.category.region.code" from "userSettings" inner join "regions" as "user_category_region" on "user_category_region"."id" = "user_category"."regionId"');
        done();
    });
    it("should join two levels of tables and use where on a column of last joined table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).where("user.category.name", "user1").innerJoinColumn("user.category");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" inner join "userCategories" as "user_category" on "user_category"."id" = "user"."categoryId" where "user_category"."name" = \'user1\'');
        done();
    });
    it("should join three levels of tables and use where on a column of last joined table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).where("user.category.region.code", 2).innerJoinColumn("user.category.region");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" inner join "regions" as "user_category_region" on "user_category_region"."id" = "user_category"."regionId" where "user_category_region"."code" = 2');
        done();
    });
    it("should inner join with function with other table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).innerJoinTableOnFunction("otherUser", testEntities_1.User, (join) => {
            join.on("id", "=", "user2Id");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" inner join "users" as "otherUser" on "userSettings"."user2Id" = "otherUser"."id"');
        done();
    });
    it("should inner join with function with other table and use order by on joined table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex
            .query(testEntities_1.UserSetting)
            .innerJoinTableOnFunction("otherUser", testEntities_1.User, (join) => {
            join.on("id", "=", "user2Id");
        })
            .orderBy("otherUser.name");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" inner join "users" as "otherUser" on "userSettings"."user2Id" = "otherUser"."id" order by "otherUser"."name" asc');
        done();
    });
    it("should inner join with function with other tables and use order by on joined table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex
            .query(testEntities_1.UserSetting)
            .innerJoinTableOnFunction("otherUser", testEntities_1.User, (join) => {
            join.on("id", "=", "user2Id");
        })
            .innerJoinTableOnFunction("otherCategory", testEntities_1.UserCategory, (join) => {
            join.on("id", "=", "otherUser.categoryId");
        })
            .orderBy("otherCategory.name");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" inner join "users" as "otherUser" on "userSettings"."user2Id" = "otherUser"."id" inner join "userCategories" as "otherCategory" on "otherUser"."categoryId" = "otherCategory"."id" order by "otherCategory"."name" asc');
        done();
    });
    it("should inner join with function with other table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).innerJoin("otherUser", testEntities_1.User, "nickName", "=", "value");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" inner join "users" as "otherUser" on "otherUser"."nickName" = "userSettings"."value"');
        done();
    });
    it("should inner join with other table with name attribute", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).innerJoin("otherUser", testEntities_1.User, "status", "=", "otherValue").where("otherUser.status", "status1").where("otherValue", "other value");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" inner join "users" as "otherUser" on "otherUser"."weirdDatabaseName" = "userSettings"."other_value" where "otherUser"."weirdDatabaseName" = \'status1\' and "userSettings"."other_value" = \'other value\'');
        done();
    });
    it("should left outer join with other table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).leftOuterJoin("otherUser", testEntities_1.User, "nickName", "=", "value");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" left outer join "users" as "otherUser" on "otherUser"."nickName" = "userSettings"."value"');
        done();
    });
    it("should left outer join with other table with name attribute", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).leftOuterJoin("otherUser", testEntities_1.User, "status", "=", "otherValue");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" left outer join "users" as "otherUser" on "otherUser"."weirdDatabaseName" = "userSettings"."other_value"');
        done();
    });
    it("should left outer join with other tables", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex
            .query(testEntities_1.UserSetting)
            .leftOuterJoin("otherUser", testEntities_1.User, "status", "=", "otherValue")
            .leftOuterJoin("otherUser.otherOtherUser", testEntities_1.User, "status", "=", "otherUser.status")
            .select("otherUser.otherOtherUser.name");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "otherUser_otherOtherUser"."name" as "otherUser.otherOtherUser.name" from "userSettings" left outer join "users" as "otherUser" on "otherUser"."weirdDatabaseName" = "userSettings"."other_value" left outer join "users" as "otherUser_otherOtherUser" on "otherUser_otherOtherUser"."weirdDatabaseName" = "otherUser"."weirdDatabaseName"');
        done();
    });
    it("should select 2 columns at once", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).select("id", "name");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "users"."id" as "id", "users"."name" as "name" from "users"');
        done();
    });
    it("should select 2 columns at once from parent", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).select("user.id", "user.name");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "user"."id" as "user.id", "user"."name" as "user.name" from "userSettings"');
        done();
    });
    it("should select raw query", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).selectRaw("subQuery", Number, "select other.id from other");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select (select other.id from other) as "subQuery" from "users"');
        done();
    });
    it("should create query with AND in where clause", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).where("name", "user1").andWhere("name", "user2").andWhere("name", "like", "%user%");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."name" = \'user1\' and "users"."name" = \'user2\' and "users"."name" like \'%user%\'');
        done();
    });
    it("should create query with OR in where clause", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).where("name", "user1").orWhere("name", "user2").orWhere("name", "like", "%user%");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."name" = \'user1\' or "users"."name" = \'user2\' or "users"."name" like \'%user%\'');
        done();
    });
    it("should create query with where in", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereIn("name", ["user1", "user2"]);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."name" in (\'user1\', \'user2\')');
        done();
    });
    it("should create query with where not in", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereNotIn("name", ["user1", "user2"]);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."name" not in (\'user1\', \'user2\')');
        done();
    });
    it("should create query with where between", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereBetween("numericValue", [1, 10]);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."numericValue" between 1 and 10');
        done();
    });
    it("should create query with where not between", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereNotBetween("numericValue", [1, 10]);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."numericValue" not between 1 and 10');
        done();
    });
    it("should create query with where exists", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereExists(testEntities_1.UserSetting, (subQuery) => {
            subQuery.whereColumn("userId", "=", "id");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, `select * from "users" where exists (select * from "userSettings" as "subquery0$userSettings" where "subquery0$userSettings"."userId" = "users"."id")`);
        done();
    });
    it("should create query with where exists with column name mapping", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereExists(testEntities_1.UserSetting, (subQuery) => {
            subQuery.innerJoinColumn("user");
            subQuery.whereColumn("user.notUndefinedStatus", "=", "notUndefinedStatus");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, `select * from "users" where exists (select * from "userSettings" as "subquery0$userSettings" inner join "users" as "subquery0$user" on "subquery0$user"."id" = "subquery0$userSettings"."userId" where "subquery0$user"."weirdDatabaseName2" = "users"."weirdDatabaseName2")`);
        done();
    });
    it("should create query with or where exists", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex
            .query(testEntities_1.User)
            .where("name", "name")
            .orWhereExists(testEntities_1.UserSetting, (subQuery) => {
            subQuery.whereColumn("userId", "=", "id");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."name" = \'name\' or exists (select * from "userSettings" as "subquery0$userSettings" where "subquery0$userSettings"."userId" = "users"."id")');
        done();
    });
    it("should create query with where not exists", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereNotExists(testEntities_1.UserSetting, (subQuery) => {
            subQuery.whereColumn("userId", "=", "id");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where not exists (select * from "userSettings" as "subquery0$userSettings" where "subquery0$userSettings"."userId" = "users"."id")');
        done();
    });
    it("should create query with or where not exists", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex
            .query(testEntities_1.User)
            .where("name", "name")
            .orWhereNotExists(testEntities_1.UserSetting, (subQuery) => {
            subQuery.whereColumn("userId", "=", "id");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."name" = \'name\' or not exists (select * from "userSettings" as "subquery0$userSettings" where "subquery0$userSettings"."userId" = "users"."id")');
        done();
    });
    it("should create query with where raw", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereRaw("?? = ??", "users.id", "users.name");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."id" = "users"."name"');
        done();
    });
    it("should create query with group by", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).select("someValue").selectRaw("total", Number, 'SUM("numericValue")').groupBy("someValue");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "users"."someValue" as "someValue", (SUM("numericValue")) as "total" from "users" group by "users"."someValue"');
        done();
    });
    it("should create query with having", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).having("numericValue", ">", 10);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" having "users"."numericValue" > 10');
        done();
    });
    it("should create query with having null", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).havingNull("numericValue");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" having "users"."numericValue" is null');
        done();
    });
    it("should create query with having not null", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).havingNotNull("numericValue");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" having "users"."numericValue" is not null');
        done();
    });
    it("should create query with having in", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).havingIn("name", ["user1", "user2"]);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" having "users"."name" in (\'user1\', \'user2\')');
        done();
    });
    it("should create query with having not in", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).havingNotIn("name", ["user1", "user2"]);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" having "users"."name" not in (\'user1\', \'user2\')');
        done();
    });
    it("should create query with having exists", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).havingExists(testEntities_1.UserSetting, (subQuery) => {
            subQuery.whereColumn("userId", "=", "id");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" having exists (select * from "userSettings" as "subquery0$userSettings" where "subquery0$userSettings"."userId" = "users"."id")');
        done();
    });
    it("should create query with having not exists", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).havingNotExists(testEntities_1.UserSetting, (subQuery) => {
            subQuery.whereColumn("userId", "=", "id");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" having not exists (select * from "userSettings" as "subquery0$userSettings" where "subquery0$userSettings"."userId" = "users"."id")');
        done();
    });
    it("should create query with having raw", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).havingRaw("?? = ??", "users.id", "users.name");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" having "users"."id" = "users"."name"');
        done();
    });
    it("should create query with having between", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).havingBetween("numericValue", [1, 10]);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" having "users"."numericValue" between 1 and 10');
        done();
    });
    it("should create query with having not between", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).havingNotBetween("numericValue", [1, 10]);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" having "users"."numericValue" not between 1 and 10');
        done();
    });
    it("should create query with an union", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex
            .query(testEntities_1.User)
            .select("id")
            .union(testEntities_1.User, (subQuery) => {
            subQuery.select("id").where("numericValue", 12);
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "users"."id" as "id" from "users" union select "users"."id" as "id" from "users" where "users"."numericValue" = 12');
        done();
    });
    it("should create query with an union all", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex
            .query(testEntities_1.User)
            .select("id")
            .unionAll(testEntities_1.User, (subQuery) => {
            subQuery.select("id").where("numericValue", 12);
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "users"."id" as "id" from "users" union all select "users"."id" as "id" from "users" where "users"."numericValue" = 12');
        done();
    });
    it("should create query with min", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).min("numericValue", "minNumericValue");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select min("users"."numericValue") as "minNumericValue" from "users"');
        done();
    });
    it("should create query with count", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).count("numericValue", "countNumericValue");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select count("users"."numericValue") as "countNumericValue" from "users"');
        done();
    });
    it("should create query with countDistinct", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).countDistinct("numericValue", "countDistinctNumericValue");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select count(distinct "users"."numericValue") as "countDistinctNumericValue" from "users"');
        done();
    });
    it("should create query with max", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).max("numericValue", "maxNumericValue");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select max("users"."numericValue") as "maxNumericValue" from "users"');
        done();
    });
    it("should create query with two max", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).max("numericValue", "maxNumericValue").max("someValue", "maxSomeValue");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select max("users"."numericValue") as "maxNumericValue", max("users"."someValue") as "maxSomeValue" from "users"');
        done();
    });
    it("should create query with sum", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).sum("numericValue", "sumNumericValue");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select sum("users"."numericValue") as "sumNumericValue" from "users"');
        done();
    });
    it("should create query with sumDistinct", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).sumDistinct("numericValue", "sumDistinctNumericValue");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select sum(distinct "users"."numericValue") as "sumDistinctNumericValue" from "users"');
        done();
    });
    it("should create query with avg", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).avg("numericValue", "avgNumericValue");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select avg("users"."numericValue") as "avgNumericValue" from "users"');
        done();
    });
    it("should create query with avgDistinct", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).avgDistinct("numericValue", "avgDistinctNumericValue");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select avg(distinct "users"."numericValue") as "avgDistinctNumericValue" from "users"');
        done();
    });
    it("should create query with order by", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).orderBy("id");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" order by "users"."id" asc');
        done();
    });
    it("should clear select", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).select("id").clearSelect();
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users"');
        done();
    });
    it("should clear where", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).where("name", "user1").clearWhere();
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users"');
        done();
    });
    it("should clear order", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).orderBy("id").clearOrder();
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users"');
        done();
    });
    it("should create query with distinct", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).select("id").distinct();
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select distinct "users"."id" as "id" from "users"');
        done();
    });
    it("should clone and adjust only the clone", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).select("id");
        const clonedQuery = query.clone();
        clonedQuery.select("name");
        chai_1.assert.equal(query.toQuery(), 'select "users"."id" as "id" from "users"');
        chai_1.assert.equal(clonedQuery.toQuery(), 'select "users"."id" as "id", "users"."name" as "name" from "users"');
        done();
    });
    it("should create query with groupby raw", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).groupByRaw("year WITH ROLLUP");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" group by year WITH ROLLUP');
        done();
    });
    it("should create query with or where in", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereIn("name", ["user1", "user2"]).orWhereIn("name", ["user3", "user4"]);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."name" in (\'user1\', \'user2\') or "users"."name" in (\'user3\', \'user4\')');
        done();
    });
    it("should create query with or where not in", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereNotIn("name", ["user1", "user2"]).orWhereNotIn("name", ["user3", "user4"]);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."name" not in (\'user1\', \'user2\') or "users"."name" not in (\'user3\', \'user4\')');
        done();
    });
    it("should create query with or where between", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereBetween("numericValue", [1, 10]).orWhereBetween("numericValue", [100, 1000]);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."numericValue" between 1 and 10 or "users"."numericValue" between 100 and 1000');
        done();
    });
    it("should create query with or where not between", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereNotBetween("numericValue", [1, 10]).orWhereNotBetween("numericValue", [100, 1000]);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."numericValue" not between 1 and 10 or "users"."numericValue" not between 100 and 1000');
        done();
    });
    it("should create query with parentheses in where", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex
            .query(testEntities_1.User)
            .whereParentheses((sub) => sub.where("id", "1").orWhere("id", "2"))
            .orWhere("name", "Tester");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where ("users"."id" = \'1\' or "users"."id" = \'2\') or "users"."name" = \'Tester\'');
        done();
    });
    it("should return metadata from Entities", (done) => {
        const entities = src_1.getEntities();
        chai_1.assert.equal(entities.length, 5);
        chai_1.assert.exists(entities.find((i) => i.tableName === "users"));
        chai_1.assert.exists(entities.find((i) => i.tableName === "correctTableName"));
        done();
    });
    it("should create query with where null", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereNull("name").orWhereNull("name");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."name" is null or "users"."name" is null');
        done();
    });
    it("should create query with where not null", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereNotNull("name").orWhereNotNull("name");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "users"."name" is not null or "users"."name" is not null');
        done();
    });
    it("should left outer join a table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).leftOuterJoinColumn("user");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" left outer join "users" as "user" on "user"."id" = "userSettings"."userId"');
        done();
    });
    it("should return camelCase correctly", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).select("initialValue");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "userSettings"."initialValue" as "initialValue" from "userSettings"');
        done();
    });
    it("should left outer join with function with itself", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).leftOuterJoinTableOnFunction("evilTwin", testEntities_1.UserSetting, (join) => {
            join.on("id", "=", "id");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" left outer join "userSettings" as "evilTwin" on "userSettings"."id" = "evilTwin"."id"');
        done();
    });
    it("should left outer join with function with other table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).leftOuterJoinTableOnFunction("otherUser", testEntities_1.User, (join) => {
            join.on("id", "=", "user2Id");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" left outer join "users" as "otherUser" on "userSettings"."user2Id" = "otherUser"."id"');
        done();
    });
    it("should left outer join with function with other table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).leftOuterJoinTableOnFunction("otherUser", testEntities_1.User, (join) => {
            join.on("id", "=", "user2Id").onNull("name");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" left outer join "users" as "otherUser" on "userSettings"."user2Id" = "otherUser"."id" and "otherUser"."name" is null');
        done();
    });
    it("should left outer join with function with other table with on and on or on", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).leftOuterJoinTableOnFunction("otherUser", testEntities_1.User, (join) => {
            join.on("id", "=", "user2Id").andOn("name", "=", "user2Id").orOn("someValue", "=", "user2Id");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" left outer join "users" as "otherUser" on "userSettings"."user2Id" = "otherUser"."id" and "userSettings"."user2Id" = "otherUser"."name" or "userSettings"."user2Id" = "otherUser"."someValue"');
        done();
    });
    it("should left outer join with function with other table with onVal", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).leftOuterJoinTableOnFunction("otherUser", testEntities_1.User, (join) => {
            join.onVal("name", "=", "1").andOnVal("name", "=", "2").orOnVal("name", "=", "3");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" left outer join "users" as "otherUser" on "otherUser"."name" = \'1\' and "otherUser"."name" = \'2\' or "otherUser"."name" = \'3\'');
        done();
    });
    it("should be able to use joined column in another leftOuterJoinTableOnFunction", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex
            .query(testEntities_1.UserSetting)
            .leftOuterJoinTableOnFunction("evilTwin", testEntities_1.UserSetting, (join) => {
            join.on("id", "=", "id");
        })
            .leftOuterJoinTableOnFunction("evilTwin2", testEntities_1.UserSetting, (join) => {
            join.on("id", "=", "evilTwin.id");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" left outer join "userSettings" as "evilTwin" on "userSettings"."id" = "evilTwin"."id" left outer join "userSettings" as "evilTwin2" on "evilTwin"."id" = "evilTwin2"."id"');
        done();
    });
    it("should left outer join with function with other table with an column alias", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserCategory).leftOuterJoinTableOnFunction("specialRegion", testEntities_1.Region, (join) => {
            join.on("id", "=", "specialRegionId");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userCategories" left outer join "regions" as "specialRegion" on "userCategories"."INTERNAL_NAME" = "specialRegion"."id"');
        done();
    });
    it('should return select * from "users"', (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).limit(10);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" limit 10');
        done();
    });
    it('should return select * from "users"', (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).offset(10);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" offset 10');
        done();
    });
    it('should return select * from "users"', (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User);
        query.useKnexQueryBuilder((queryBuilder) => queryBuilder.where("somethingelse", "value"));
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where "somethingelse" = \'value\'');
        done();
    });
    it("should removeNullObjects", (done) => {
        const result = {
            id: "id",
            "element.id": null,
            "element.category.id": null,
            "unit.category.id": null,
            "category.name": "cat name",
        };
        const flattened = unflatten_1.unflatten([result]);
        chai_1.assert.isNull(flattened[0].element.id);
        chai_1.assert.isNull(flattened[0].unit.category.id);
        chai_1.assert.equal(flattened[0].category.name, "cat name");
        const nulled = unflatten_1.setToNull(flattened);
        chai_1.assert.isNull(nulled[0].element);
        chai_1.assert.equal(nulled[0].category.name, "cat name");
        chai_1.assert.isNull(nulled[0].unit);
        done();
    });
    it("should return sub query in select", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex
            .query(testEntities_1.UserCategory)
            .select("id")
            .selectQuery("total", Number, testEntities_1.User, (subQuery) => {
            subQuery.count("id", "total").whereColumn("categoryId", "=", "id");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "userCategories"."id" as "id", (select count("users"."id") as "total" from "users" where "users"."categoryId" = "userCategories"."id") as "total" from "userCategories"');
        done();
    });
    it("should left outer join with function with and in on", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.UserSetting).leftOuterJoinTableOnFunction("evilTwin", testEntities_1.UserSetting, (join) => {
            join.on("id", "=", "id");
            join.on("key", "=", "key");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "userSettings" left outer join "userSettings" as "evilTwin" on "userSettings"."id" = "evilTwin"."id" and "userSettings"."key" = "evilTwin"."key"');
        done();
    });
    it("should left outer join with function and selection of joined table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex
            .query(testEntities_1.UserSetting)
            .leftOuterJoinTableOnFunction("evilTwin", testEntities_1.UserSetting, (join) => {
            join.on("id", "=", "id");
        })
            .where("evilTwin.value", "value")
            .select("evilTwin.key");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select "evilTwin"."key" as "evilTwin.key" from "userSettings" left outer join "userSettings" as "evilTwin" on "userSettings"."id" = "evilTwin"."id" where "evilTwin"."value" = \'value\'');
        done();
    });
    it("should get name of the table", (done) => {
        const tableName = src_1.getTableName(testEntities_1.User);
        chai_1.assert.equal(tableName, "users");
        done();
    });
    it("should get name of the column", (done) => {
        const columnName = decorators_1.getColumnName(testEntities_1.User, "id");
        chai_1.assert.equal(columnName, "id");
        done();
    });
    it("should insert a select", async () => {
        const k = knex_1.knex({ client: "postgresql" });
        const typedKnex = new typedKnex_1.TypedKnex(k);
        const query = typedKnex.query(testEntities_1.User);
        try {
            await query.selectRaw("f", String, "'fixedValue'").select("name").distinct().whereNotNull("name").insertSelect(testEntities_1.UserSetting, "id", "initialValue");
        }
        catch (_e) {
            chai_1.assert.equal(query.toQuery(), `insert into "userSettings" ("userSettings"."id","userSettings"."initialValue") select distinct ('fixedValue') as "f", "users"."name" as "name" from "users" where "users"."name" is not null`);
        }
    });
    it("should create query with order by raw", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).orderByRaw("SUM(??) DESC", "users.year");
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" order by SUM("users"."year") DESC');
        done();
    });
    it("should create query with where in with subquery", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereExists(testEntities_1.UserSetting, (subQuery) => {
            subQuery.whereColumn("userId", "=", "id");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users" where exists (select * from "userSettings" as "subquery0$userSettings" where "subquery0$userSettings"."userId" = "users"."id")');
        done();
    });
    it("should create insert query with returning all", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.User);
        query.onlyLogQuery = true;
        await query.insertItemWithReturning({ id: "newId" });
        chai_1.assert.equal(query.queryLog.trim(), `insert into "users" ("id") values ('newId') returning *`);
    });
    it("should create insert query with returning 1 column", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.User);
        query.onlyLogQuery = true;
        await query.insertItemWithReturning({ id: "newId" }, ["status"]);
        chai_1.assert.equal(query.queryLog.trim(), `insert into "users" ("id") values ('newId') returning "users"."weirdDatabaseName"`);
    });
    it("should create insert query with returning 2 column", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.User);
        query.onlyLogQuery = true;
        await query.insertItemWithReturning({ id: "newId" }, ["status", "id"]);
        chai_1.assert.equal(query.queryLog.trim(), `insert into "users" ("id") values ('newId') returning "users"."weirdDatabaseName", "users"."id"`);
    });
    it("should create insert query", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.User);
        query.onlyLogQuery = true;
        await query.insertItem({ id: "newId" });
        chai_1.assert.equal(query.queryLog.trim(), `insert into "users" ("id") values ('newId')`);
    });
    it("should create insert query with column name mapping", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.User);
        query.onlyLogQuery = true;
        await query.insertItem({ status: "newStatus" });
        chai_1.assert.equal(query.queryLog.trim(), `insert into "users" ("weirdDatabaseName") values ('newStatus')`);
    });
    it("should create multiple insert queries", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.User);
        query.onlyLogQuery = true;
        await query.insertItems([{ id: "newId1" }, { id: "newId2" }]);
        chai_1.assert.equal(query.queryLog.trim(), `insert into "users" ("id") values ('newId1'), ('newId2')`);
    });
    it("should create multiple insert queries with column name mapping", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.User);
        query.onlyLogQuery = true;
        await query.insertItems([{ status: "newStatus1" }, { status: "newStatus2" }]);
        chai_1.assert.equal(query.queryLog.trim(), `insert into "users" ("weirdDatabaseName") values ('newStatus1'), ('newStatus2')`);
    });
    it("should create update query", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.User);
        query.onlyLogQuery = true;
        await query.updateItem({ id: "newId" });
        chai_1.assert.equal(query.queryLog.trim(), `update "users" set "id" = 'newId'`);
    });
    it("should create update query with column name mapping", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.User);
        query.onlyLogQuery = true;
        await query.updateItem({ status: "newStatus" });
        chai_1.assert.equal(query.queryLog.trim(), `update "users" set "weirdDatabaseName" = 'newStatus'`);
    });
    it("should create update query by id", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.User);
        query.onlyLogQuery = true;
        await query.updateItemByPrimaryKey("userId", { name: "newName" });
        chai_1.assert.equal(query.queryLog.trim(), `update "users" set "name" = 'newName' where "id" = 'userId'`);
    });
    it("should create update query by id with column name mapping", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.User);
        query.onlyLogQuery = true;
        await query.updateItemByPrimaryKey("userId", { status: "newStatus" });
        chai_1.assert.equal(query.queryLog.trim(), `update "users" set "weirdDatabaseName" = 'newStatus' where "id" = 'userId'`);
    });
    it("should create multiple update queries by id", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.User);
        query.onlyLogQuery = true;
        await query.updateItemsByPrimaryKey([
            { primaryKeyValue: "userId1", data: { name: "newName1" } },
            { primaryKeyValue: "userId2", data: { name: "newName2" } },
        ]);
        chai_1.assert.equal(query.queryLog.trim(), `update "users" set "name" = 'newName1' where "id" = 'userId1';\nupdate "users" set "name" = 'newName2' where "id" = 'userId2';`);
    });
    it("should create multiple update queries by id with column name mapping", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.User);
        query.onlyLogQuery = true;
        await query.updateItemsByPrimaryKey([
            { primaryKeyValue: "userId1", data: { status: "newStatus1" } },
            { primaryKeyValue: "userId2", data: { status: "newStatus2" } },
        ]);
        chai_1.assert.equal(query.queryLog.trim(), `update "users" set "weirdDatabaseName" = 'newStatus1' where "id" = 'userId1';\nupdate "users" set "weirdDatabaseName" = 'newStatus2' where "id" = 'userId2';`);
    });
    it("should create findByPrimaryKey query", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.User);
        query.onlyLogQuery = true;
        await query.findByPrimaryKey("1", "id", "name");
        chai_1.assert.equal(query.queryLog.trim(), `select "users"."id" as "id", "users"."name" as "name" from "users" where "id" = '1'`);
    });
    it("should select * when querybuilder has no select specified", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User);
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, 'select * from "users"');
        done();
    });
    it("getMany should select all columns of root type with correct aliases", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.UserCategory);
        query.onlyLogQuery = true;
        await query.getMany();
        chai_1.assert.equal(query.queryLog.trim(), `select "id" as "id", "name" as "name", "regionId" as "region", "regionId" as "regionId", "year" as "year", "phoneNumber" as "phoneNumber", "backupRegionId" as "backupRegion", "INTERNAL_NAME" as "specialRegionId" from "userCategories"`);
    });
    it("getFirst should select all columns of root type with correct aliases", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.UserCategory);
        query.onlyLogQuery = true;
        await query.getFirst();
        chai_1.assert.equal(query.queryLog.trim(), `select "id" as "id", "name" as "name", "regionId" as "region", "regionId" as "regionId", "year" as "year", "phoneNumber" as "phoneNumber", "backupRegionId" as "backupRegion", "INTERNAL_NAME" as "specialRegionId" from "userCategories"`);
    });
    it("getFirstOrNull should select all columns of root type with correct aliases", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.UserCategory);
        query.onlyLogQuery = true;
        await query.getFirstOrNull();
        chai_1.assert.equal(query.queryLog.trim(), `select "id" as "id", "name" as "name", "regionId" as "region", "regionId" as "regionId", "year" as "year", "phoneNumber" as "phoneNumber", "backupRegionId" as "backupRegion", "INTERNAL_NAME" as "specialRegionId" from "userCategories"`);
    });
    it("getSingle should select all columns of root type with correct aliases", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.UserCategory);
        query.onlyLogQuery = true;
        await query.getSingle();
        chai_1.assert.equal(query.queryLog.trim(), `select "id" as "id", "name" as "name", "regionId" as "region", "regionId" as "regionId", "year" as "year", "phoneNumber" as "phoneNumber", "backupRegionId" as "backupRegion", "INTERNAL_NAME" as "specialRegionId" from "userCategories"`);
    });
    it("getSingleOrNull should select all columns of root type with correct aliases", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.UserCategory);
        query.onlyLogQuery = true;
        const a = await query.getSingleOrNull();
        console.log("a", a === null || a === void 0 ? void 0 : a.id);
        chai_1.assert.equal(query.queryLog.trim(), `select "id" as "id", "name" as "name", "regionId" as "region", "regionId" as "regionId", "year" as "year", "phoneNumber" as "phoneNumber", "backupRegionId" as "backupRegion", "INTERNAL_NAME" as "specialRegionId" from "userCategories"`);
    });
    it("should handle where exists on same table as main table", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereExists(testEntities_1.User, (subQuery) => {
            subQuery.whereColumn("status", "=", "status").whereColumn("id", "<>", "id");
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, `select * from "users" where exists (select * from "users" as "subquery0$users" where "subquery0$users"."weirdDatabaseName" = "users"."weirdDatabaseName" and "subquery0$users"."id" <> "users"."id")`);
        done();
    });
    it("should handle two levels of where exists", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User).whereExists(testEntities_1.User, (subQuery) => {
            subQuery.whereColumn("status", "=", "status").whereColumn("id", "<>", "id");
            subQuery.whereExists(testEntities_1.User, (subQuery2) => {
                subQuery2.whereColumn("status", "=", "status").whereColumn("id", "<>", "id");
            });
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, `select * from "users" where exists (select * from "users" as "subquery0$users" where "subquery0$users"."weirdDatabaseName" = "users"."weirdDatabaseName" and "subquery0$users"."id" <> "users"."id" and exists (select * from "users" as "subquery0$subquery0$users" where "subquery0$subquery0$users"."weirdDatabaseName" = "subquery0$users"."weirdDatabaseName" and "subquery0$subquery0$users"."id" <> "subquery0$users"."id"))`);
        done();
    });
    it("getSingleOrNull should select all columns of root type with correct aliases", async () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        typedKnex.onlyLogQuery = true;
        const query = typedKnex.query(testEntities_1.UserCategory);
        query.onlyLogQuery = true;
        await query.getSingleOrNull();
        chai_1.assert.equal(query.queryLog.trim(), `select "id" as "id", "name" as "name", "regionId" as "region", "regionId" as "regionId", "year" as "year", "phoneNumber" as "phoneNumber", "backupRegionId" as "backupRegion", "INTERNAL_NAME" as "specialRegionId" from "userCategories"`);
    });
    it("should get correct column for nested queries", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        let nestedStatusColumnName;
        let nestedUserCategoryYear;
        const query = typedKnex.query(testEntities_1.User).whereExists(testEntities_1.User, (subQuery) => {
            subQuery.innerJoinColumn("category").select("category.id").select("status");
            nestedStatusColumnName = subQuery.getColumnAlias("status");
            nestedUserCategoryYear = subQuery.getColumnAlias("category.year");
        });
        query.toQuery();
        chai_1.assert.equal(nestedStatusColumnName, '"subquery0$users"."weirdDatabaseName"');
        chai_1.assert.equal(nestedUserCategoryYear, '"subquery0$category"."year"');
        done();
    });
    it("should be able to refer to main query in raw where exists", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User);
        query.whereExists(testEntities_1.User, (subQuery) => {
            subQuery.whereColumn("status", "=", "status").whereColumn("id", "<>", "id").whereRaw(`EXISTS (SELECT 1 FROM users as users2 WHERE ${query.getColumnAlias("status")} = users2."weirdDatabaseName" AND ${query.getColumnAlias("id")} <> users2."id")
            `);
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, `select * from "users" where exists (select * from "users" as "subquery0$users" where "subquery0$users"."weirdDatabaseName" = "users"."weirdDatabaseName" and "subquery0$users"."id" <> "users"."id" and EXISTS (SELECT 1 FROM users as users2 WHERE "users"."weirdDatabaseName" = users2."weirdDatabaseName" AND "users"."id" <> users2."id")
            )`);
        done();
    });
    it("should be able to refer to main query in where exists", (done) => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        const query = typedKnex.query(testEntities_1.User);
        query.whereExists(testEntities_1.User, (subQuery1) => {
            subQuery1.whereColumn("status", "=", "status"); // Compares subQuery1 with its parent (query)
            subQuery1.whereExists(testEntities_1.User, (subQuery2) => {
                subQuery2.whereColumn(subQuery2.getColumn("status"), "=", query.getColumn("status")); // Compares subQuery2 with the first parent (query)
                subQuery2.whereExists(testEntities_1.User, (subQuery3) => {
                    subQuery3.whereColumn(subQuery3.getColumn("status"), "=", subQuery1.getColumn("status")); // Compares subQuery3 with the second parent (subQuery1)
                });
            });
        });
        const queryString = query.toQuery();
        chai_1.assert.equal(queryString, `select * from "users" where exists (select * from "users" as "subquery0$users" where "subquery0$users"."weirdDatabaseName" = "users"."weirdDatabaseName" and exists (select * from "users" as "subquery0$subquery0$users" where "subquery0$subquery0$users"."weirdDatabaseName" = "users"."weirdDatabaseName" and exists (select * from "users" as "subquery0$subquery0$subquery0$users" where "subquery0$subquery0$subquery0$users"."weirdDatabaseName" = "subquery0$users"."weirdDatabaseName")))`);
        done();
    });
    describe("getColumnAlias", () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        it("should return root column name", async () => {
            const query = typedKnex.query(testEntities_1.UserCategory);
            chai_1.assert.equal(query.getColumnAlias("id"), '"userCategories"."id"');
        });
        it("should return root column name with mapped name", async () => {
            const query = typedKnex.query(testEntities_1.UserCategory);
            chai_1.assert.equal(query.getColumnAlias("specialRegionId"), '"userCategories"."INTERNAL_NAME"');
        });
        it("should return named joined column name", async () => {
            const query = typedKnex.query(testEntities_1.UserCategory).innerJoin("user", testEntities_1.User, "categoryId", "=", "id");
            chai_1.assert.equal(query.getColumnAlias("user.id"), '"user"."id"');
        });
        it("should return named joined column name with mapped name", async () => {
            const query = typedKnex.query(testEntities_1.UserCategory).innerJoin("user", testEntities_1.User, "categoryId", "=", "id");
            chai_1.assert.equal(query.getColumnAlias("user.status"), '"user"."weirdDatabaseName"');
        });
        it("should return two levels joined column name", async () => {
            const query = typedKnex.query(testEntities_1.User).innerJoinColumn("category").innerJoinColumn("category.region");
            chai_1.assert.equal(query.getColumnAlias("category.region.code"), '"category_region"."code"');
        });
        it("should return select with alias", async () => {
            const query = typedKnex.query(testEntities_1.UserCategory);
            query.selectRaw("hash", String, `hashFunction(${query.getColumnAlias("name")})`).select("id");
            const queryString = query.toQuery();
            chai_1.assert.equal(queryString, 'select (hashFunction("userCategories"."name")) as "hash", "userCategories"."id" as "id" from "userCategories"');
        });
    });
    describe("distinctOn", () => {
        const typedKnex = new typedKnex_1.TypedKnex(knex_1.knex({ client: "postgresql" }));
        it("should distinct on 1 column", (done) => {
            const query = typedKnex.query(testEntities_1.UserCategory).select("id").distinctOn(["name"]);
            const queryString = query.toQuery();
            chai_1.assert.equal(queryString, 'select distinct on ("userCategories"."name") "userCategories"."id" as "id" from "userCategories"');
            done();
        });
        it("should distinct on 2 columns", (done) => {
            const query = typedKnex.query(testEntities_1.UserCategory).select("id").distinctOn(["name", "phoneNumber"]);
            const queryString = query.toQuery();
            chai_1.assert.equal(queryString, 'select distinct on ("userCategories"."name", "userCategories"."phoneNumber") "userCategories"."id" as "id" from "userCategories"');
            done();
        });
        it("should distinct on 1 column with mapping", (done) => {
            const query = typedKnex.query(testEntities_1.UserCategory).select("id").distinctOn(["specialRegionId"]);
            const queryString = query.toQuery();
            chai_1.assert.equal(queryString, 'select distinct on ("userCategories"."INTERNAL_NAME") "userCategories"."id" as "id" from "userCategories"');
            done();
        });
        it("should distinct on columns with join and with mapping", (done) => {
            const query = typedKnex.query(testEntities_1.User).innerJoin("category", testEntities_1.UserCategory, "id", "=", "categoryId").select("id").distinctOn(["name", "category.id", "category.specialRegionId"]);
            const queryString = query.toQuery();
            chai_1.assert.equal(queryString, 'select distinct on ("users"."name", "category"."id", "category"."INTERNAL_NAME") "users"."id" as "id" from "users" inner join "userCategories" as "category" on "category"."id" = "users"."categoryId"');
            done();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,