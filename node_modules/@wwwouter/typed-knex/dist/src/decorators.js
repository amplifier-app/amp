"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrimaryKeyColumn = exports.getColumnProperties = exports.getColumnInformation = exports.Column = exports.getColumnName = exports.getTableName = exports.getTableMetadata = exports.Table = exports.Entity = exports.getEntities = void 0;
require("reflect-metadata");
const tableyMetadataKey = Symbol('table');
const tableColumns = new Map();
const entities = [];
// export function Entity2(tableName: string) {
//     return ((target: Function) => {
//         console.log('target: ', target);
//         return Reflect.metadata(tableyMetadataKey, { tableName: tableName });
//     })(arguments);
// }
function getEntities() {
    return entities;
}
exports.getEntities = getEntities;
function Entity(tableName) {
    return (target) => {
        Reflect.metadata(tableyMetadataKey, { tableName: tableName !== null && tableName !== void 0 ? tableName : target.name })(target);
        entities.push({ tableName: tableName !== null && tableName !== void 0 ? tableName : target.name, entityClass: target });
    };
}
exports.Entity = Entity;
// tslint:disable-next-line: variable-name
exports.Table = Entity;
function getTableMetadata(tableClass) {
    return Reflect.getMetadata(tableyMetadataKey, tableClass);
}
exports.getTableMetadata = getTableMetadata;
function getTableName(tableClass) {
    return Reflect.getMetadata(tableyMetadataKey, tableClass).tableName;
}
exports.getTableName = getTableName;
function getColumnName(tableClass, propertyName) {
    return getColumnInformation(tableClass, propertyName).name;
}
exports.getColumnName = getColumnName;
// function registerEntity(target: any, propertyKey: string): void {
//     Reflect.metadata(columnMetadataKey, { isColumn: true })(target);
//     const columns = tableColumns.get(target.constructor) || [];
//     let name = propertyKey;
//     // console.log('name: ', name);
//     let primary = false;
//     // console.log('options: ', options);
//     if (options) {
//         if (options.name !== undefined) {
//             name = options.name;
//         }
//         primary = options.primary === true;
//     }
//     columns.push({ name, primary, propertyKey });
//     tableColumns.set(target.constructor, columns);
// }
const columnMetadataKey = Symbol('column');
function Column(options) {
    return getRegisterColumn(options);
}
exports.Column = Column;
function getRegisterColumn(options) {
    function registerColumn(target, propertyKey) {
        Reflect.metadata(columnMetadataKey, { isColumn: true })(target);
        const designType = Reflect.getMetadata('design:type', target, propertyKey);
        const isForeignKey = designType
            ? ['String', 'Number', 'Boolean'].includes(designType.name) ===
                false
            : false;
        const columns = tableColumns.get(target.constructor) || [];
        let name = propertyKey;
        // console.log('name: ', name);
        let primary = false;
        // console.log('options: ', options);
        if (options) {
            if (options.name !== undefined) {
                name = options.name;
            }
            primary = options.primary === true;
        }
        columns.push({ name, primary, propertyKey, isForeignKey, designType });
        tableColumns.set(target.constructor, columns);
    }
    return registerColumn;
}
function getColumnInformation(target, propertyKey) {
    const properties = getColumnProperties(target);
    const property = properties.find(i => i.propertyKey === propertyKey);
    if (!property) {
        const fkObject = properties.find(p => p.name === propertyKey);
        if (typeof (fkObject === null || fkObject === void 0 ? void 0 : fkObject.designType) === 'function') {
            throw new Error(`It seems that class "${target.name}" only has a foreign key object "${fkObject.propertyKey}", but is missing the foreign key property "${propertyKey}". Try adding "@column() ${propertyKey} : [correct type]" to class "${target.name}"`);
        }
        throw new Error(`Cannot get column data. Did you set @Column() attribute on ${target.name}.${propertyKey}?`);
    }
    return {
        columnClass: Reflect.getMetadata('design:type', target.prototype, propertyKey),
        name: property.name,
        primary: property.primary,
        propertyKey: property.propertyKey,
        designType: property.designType,
        isForeignKey: property.isForeignKey,
    };
}
exports.getColumnInformation = getColumnInformation;
function getColumnProperties(tableClass) {
    const columns = tableColumns.get(tableClass);
    if (!columns) {
        throw new Error(`Cannot get column data from ${tableClass.constructor.name}, did you set @Column() attribute?`);
    }
    return columns;
}
exports.getColumnProperties = getColumnProperties;
function getPrimaryKeyColumn(tableClass) {
    // console.log('tableClass: ', tableClass);
    const columns = tableColumns.get(tableClass);
    if (!columns) {
        throw new Error(`Cannot get column data from ${tableClass.constructor.name}, did you set @Column() attribute?`);
    }
    const primaryKeyColumn = columns.find(i => i.primary);
    if (primaryKeyColumn === undefined) {
        throw new Error(`Cannot get primary key column ${tableClass.constructor.name}, did you set @Column({primary:true}) attribute?`);
    }
    return primaryKeyColumn;
}
exports.getPrimaryKeyColumn = getPrimaryKeyColumn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZWNvcmF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDRCQUEwQjtBQUUxQixNQUFNLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQVMxQyxNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsRUFBMkIsQ0FBQztBQUV4RCxNQUFNLFFBQVEsR0FBRyxFQUdkLENBQUM7QUFFSiwrQ0FBK0M7QUFFL0Msc0NBQXNDO0FBQ3RDLDJDQUEyQztBQUMzQyxnRkFBZ0Y7QUFDaEYscUJBQXFCO0FBRXJCLElBQUk7QUFFSixTQUFnQixXQUFXO0lBQ3ZCLE9BQU8sUUFBUSxDQUFDO0FBQ3BCLENBQUM7QUFGRCxrQ0FFQztBQUlELFNBQWdCLE1BQU0sQ0FBQyxTQUFrQjtJQUNyQyxPQUFPLENBQUMsTUFBZ0IsRUFBRSxFQUFFO1FBQ3hCLE9BQU8sQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxTQUFTLEVBQUUsU0FBUyxhQUFULFNBQVMsY0FBVCxTQUFTLEdBQUksTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFckYsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxTQUFTLGFBQVQsU0FBUyxjQUFULFNBQVMsR0FBSSxNQUFNLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ2hGLENBQUMsQ0FBQztBQUNOLENBQUM7QUFORCx3QkFNQztBQUVELDBDQUEwQztBQUM3QixRQUFBLEtBQUssR0FBRyxNQUFNLENBQUM7QUFFNUIsU0FBZ0IsZ0JBQWdCLENBQUMsVUFBb0I7SUFDakQsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzlELENBQUM7QUFGRCw0Q0FFQztBQUdELFNBQWdCLFlBQVksQ0FB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QkFBK0IsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUN0RCxvQ0FBb0MsQ0FDdkMsQ0FBQztLQUNMO0lBQ0QsTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RELElBQUksZ0JBQWdCLEtBQUssU0FBUyxFQUFFO1FBQ2hDLE1BQU0sSUFBSSxLQUFLLENBQ1gsaUNBQWlDLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFDeEQsa0RBQWtELENBQ3JELENBQUM7S0FDTDtJQUNELE9BQU8sZ0JBQWdCLENBQUM7QUFDNUIsQ0FBQztBQWpCRCxrREFpQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3JlZmxlY3QtbWV0YWRhdGEnO1xuXG5jb25zdCB0YWJsZXlNZXRhZGF0YUtleSA9IFN5bWJvbCgndGFibGUnKTtcblxuaW50ZXJmYWNlIElDb2x1bW5EYXRhIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcHJpbWFyeTogYm9vbGVhbjtcbiAgICBwcm9wZXJ0eUtleTogc3RyaW5nO1xuICAgIGlzRm9yZWlnbktleTogYm9vbGVhbjtcbiAgICBkZXNpZ25UeXBlOiBhbnk7XG59XG5jb25zdCB0YWJsZUNvbHVtbnMgPSBuZXcgTWFwPEZ1bmN0aW9uLCBJQ29sdW1uRGF0YVtdPigpO1xuXG5jb25zdCBlbnRpdGllcyA9IFtdIGFzIHtcbiAgICB0YWJsZU5hbWU6IHN0cmluZztcbiAgICBlbnRpdHlDbGFzczogRnVuY3Rpb247XG59W107XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBFbnRpdHkyKHRhYmxlTmFtZTogc3RyaW5nKSB7XG5cbi8vICAgICByZXR1cm4gKCh0YXJnZXQ6IEZ1bmN0aW9uKSA9PiB7XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKCd0YXJnZXQ6ICcsIHRhcmdldCk7XG4vLyAgICAgICAgIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKHRhYmxleU1ldGFkYXRhS2V5LCB7IHRhYmxlTmFtZTogdGFibGVOYW1lIH0pO1xuLy8gICAgIH0pKGFyZ3VtZW50cyk7XG5cbi8vIH1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVudGl0aWVzKCkge1xuICAgIHJldHVybiBlbnRpdGllcztcbn1cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBFbnRpdHkodGFibGVOYW1lPzogc3RyaW5nKSB7XG4gICAgcmV0dXJuICh0YXJnZXQ6IEZ1bmN0aW9uKSA9PiB7XG4gICAgICAgIFJlZmxlY3QubWV0YWRhdGEodGFibGV5TWV0YWRhdGFLZXksIHsgdGFibGVOYW1lOiB0YWJsZU5hbWUgPz8gdGFyZ2V0Lm5hbWUgfSkodGFyZ2V0KTtcblxuICAgICAgICBlbnRpdGllcy5wdXNoKHsgdGFibGVOYW1lOiB0YWJsZU5hbWUgPz8gdGFyZ2V0Lm5hbWUsIGVudGl0eUNsYXNzOiB0YXJnZXQgfSk7XG4gICAgfTtcbn1cblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiB2YXJpYWJsZS1uYW1lXG5leHBvcnQgY29uc3QgVGFibGUgPSBFbnRpdHk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWJsZU1ldGFkYXRhKHRhYmxlQ2xhc3M6IEZ1bmN0aW9uKTogeyB0YWJsZU5hbWU6IHN0cmluZyB9IHtcbiAgICByZXR1cm4gUmVmbGVjdC5nZXRNZXRhZGF0YSh0YWJsZXlNZXRhZGF0YUtleSwgdGFibGVDbGFzcyk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRhYmxlTmFtZSh0YWJsZUNsYXNzOiBGdW5jdGlvbik6IHN0cmluZyB7XG4gICAgcmV0dXJuIFJlZmxlY3QuZ2V0TWV0YWRhdGEodGFibGV5TWV0YWRhdGFLZXksIHRhYmxlQ2xhc3MpLnRhYmxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbHVtbk5hbWU8VD4odGFibGVDbGFzczogbmV3ICgpID0+IFQsIHByb3BlcnR5TmFtZToga2V5b2YgVCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGdldENvbHVtbkluZm9ybWF0aW9uKHRhYmxlQ2xhc3MsIHByb3BlcnR5TmFtZSBhcyBzdHJpbmcpLm5hbWU7XG59XG5cbi8vIGZ1bmN0aW9uIHJlZ2lzdGVyRW50aXR5KHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nKTogdm9pZCB7XG5cbi8vICAgICBSZWZsZWN0Lm1ldGFkYXRhKGNvbHVtbk1ldGFkYXRhS2V5LCB7IGlzQ29sdW1uOiB0cnVlIH0pKHRhcmdldCk7XG5cbi8vICAgICBjb25zdCBjb2x1bW5zID0gdGFibGVDb2x1bW5zLmdldCh0YXJnZXQuY29uc3RydWN0b3IpIHx8IFtdO1xuXG4vLyAgICAgbGV0IG5hbWUgPSBwcm9wZXJ0eUtleTtcbi8vICAgICAvLyBjb25zb2xlLmxvZygnbmFtZTogJywgbmFtZSk7XG4vLyAgICAgbGV0IHByaW1hcnkgPSBmYWxzZTtcbi8vICAgICAvLyBjb25zb2xlLmxvZygnb3B0aW9uczogJywgb3B0aW9ucyk7XG4vLyAgICAgaWYgKG9wdGlvbnMpIHtcbi8vICAgICAgICAgaWYgKG9wdGlvbnMubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4vLyAgICAgICAgICAgICBuYW1lID0gb3B0aW9ucy5uYW1lO1xuLy8gICAgICAgICB9XG4vLyAgICAgICAgIHByaW1hcnkgPSBvcHRpb25zLnByaW1hcnkgPT09IHRydWU7XG4vLyAgICAgfVxuXG4vLyAgICAgY29sdW1ucy5wdXNoKHsgbmFtZSwgcHJpbWFyeSwgcHJvcGVydHlLZXkgfSk7XG4vLyAgICAgdGFibGVDb2x1bW5zLnNldCh0YXJnZXQuY29uc3RydWN0b3IsIGNvbHVtbnMpO1xuLy8gfVxuXG5jb25zdCBjb2x1bW5NZXRhZGF0YUtleSA9IFN5bWJvbCgnY29sdW1uJyk7XG5cbmludGVyZmFjZSBJQ29sdW1uT3B0aW9ucyB7XG4gICAgLyoqXG4gICAgICogQ29sdW1uIG5hbWUgaW4gdGhlIGRhdGFiYXNlLlxuICAgICAqL1xuICAgIG5hbWU/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgdGhpcyBjb2x1bW4gaXMgYSBwcmltYXJ5IGtleS5cbiAgICAgKi9cbiAgICBwcmltYXJ5PzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENvbHVtbihcbiAgICBvcHRpb25zPzogSUNvbHVtbk9wdGlvbnNcbik6ICh0YXJnZXQ6IG9iamVjdCwgcHJvcGVydHlLZXk6IHN0cmluZykgPT4gdm9pZCB7XG4gICAgcmV0dXJuIGdldFJlZ2lzdGVyQ29sdW1uKG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBnZXRSZWdpc3RlckNvbHVtbihvcHRpb25zPzogSUNvbHVtbk9wdGlvbnMpIHtcbiAgICBmdW5jdGlvbiByZWdpc3RlckNvbHVtbih0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBSZWZsZWN0Lm1ldGFkYXRhKGNvbHVtbk1ldGFkYXRhS2V5LCB7IGlzQ29sdW1uOiB0cnVlIH0pKHRhcmdldCk7XG5cbiAgICAgICAgY29uc3QgZGVzaWduVHlwZSA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXG4gICAgICAgICAgICAnZGVzaWduOnR5cGUnLFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgcHJvcGVydHlLZXlcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgaXNGb3JlaWduS2V5ID0gZGVzaWduVHlwZVxuICAgICAgICAgICAgPyBbJ1N0cmluZycsICdOdW1iZXInLCAnQm9vbGVhbiddLmluY2x1ZGVzKGRlc2lnblR5cGUubmFtZSkgPT09XG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgOiBmYWxzZTtcblxuICAgICAgICBjb25zdCBjb2x1bW5zID0gdGFibGVDb2x1bW5zLmdldCh0YXJnZXQuY29uc3RydWN0b3IpIHx8IFtdO1xuXG4gICAgICAgIGxldCBuYW1lID0gcHJvcGVydHlLZXk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCduYW1lOiAnLCBuYW1lKTtcbiAgICAgICAgbGV0IHByaW1hcnkgPSBmYWxzZTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ29wdGlvbnM6ICcsIG9wdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IG9wdGlvbnMubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByaW1hcnkgPSBvcHRpb25zLnByaW1hcnkgPT09IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb2x1bW5zLnB1c2goeyBuYW1lLCBwcmltYXJ5LCBwcm9wZXJ0eUtleSwgaXNGb3JlaWduS2V5LCBkZXNpZ25UeXBlIH0pO1xuICAgICAgICB0YWJsZUNvbHVtbnMuc2V0KHRhcmdldC5jb25zdHJ1Y3RvciwgY29sdW1ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlZ2lzdGVyQ29sdW1uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sdW1uSW5mb3JtYXRpb24oXG4gICAgdGFyZ2V0OiBGdW5jdGlvbixcbiAgICBwcm9wZXJ0eUtleTogc3RyaW5nXG4pOiB7IGNvbHVtbkNsYXNzOiBuZXcgKCkgPT4gYW55IH0gJiBJQ29sdW1uRGF0YSB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IGdldENvbHVtblByb3BlcnRpZXModGFyZ2V0KTtcblxuICAgIGNvbnN0IHByb3BlcnR5ID0gcHJvcGVydGllcy5maW5kKGkgPT4gaS5wcm9wZXJ0eUtleSA9PT0gcHJvcGVydHlLZXkpO1xuICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgY29uc3QgZmtPYmplY3QgPSBwcm9wZXJ0aWVzLmZpbmQocCA9PiBwLm5hbWUgPT09IHByb3BlcnR5S2V5KTtcbiAgICAgICAgaWYgKHR5cGVvZiBma09iamVjdD8uZGVzaWduVHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJdCBzZWVtcyB0aGF0IGNsYXNzIFwiJHt0YXJnZXQubmFtZX1cIiBvbmx5IGhhcyBhIGZvcmVpZ24ga2V5IG9iamVjdCBcIiR7ZmtPYmplY3QucHJvcGVydHlLZXl9XCIsIGJ1dCBpcyBtaXNzaW5nIHRoZSBmb3JlaWduIGtleSBwcm9wZXJ0eSBcIiR7cHJvcGVydHlLZXl9XCIuIFRyeSBhZGRpbmcgXCJAY29sdW1uKCkgJHtwcm9wZXJ0eUtleX0gOiBbY29ycmVjdCB0eXBlXVwiIHRvIGNsYXNzIFwiJHt0YXJnZXQubmFtZX1cImApO1xuXG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYENhbm5vdCBnZXQgY29sdW1uIGRhdGEuIERpZCB5b3Ugc2V0IEBDb2x1bW4oKSBhdHRyaWJ1dGUgb24gJHt0YXJnZXQubmFtZVxuICAgICAgICAgICAgfS4ke3Byb3BlcnR5S2V5fT9gXG4gICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNvbHVtbkNsYXNzOiBSZWZsZWN0LmdldE1ldGFkYXRhKFxuICAgICAgICAgICAgJ2Rlc2lnbjp0eXBlJyxcbiAgICAgICAgICAgIHRhcmdldC5wcm90b3R5cGUsXG4gICAgICAgICAgICBwcm9wZXJ0eUtleVxuICAgICAgICApLFxuICAgICAgICBuYW1lOiBwcm9wZXJ0eS5uYW1lLFxuICAgICAgICBwcmltYXJ5OiBwcm9wZXJ0eS5wcmltYXJ5LFxuICAgICAgICBwcm9wZXJ0eUtleTogcHJvcGVydHkucHJvcGVydHlLZXksXG4gICAgICAgIGRlc2lnblR5cGU6IHByb3BlcnR5LmRlc2lnblR5cGUsXG4gICAgICAgIGlzRm9yZWlnbktleTogcHJvcGVydHkuaXNGb3JlaWduS2V5LFxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2x1bW5Qcm9wZXJ0aWVzKHRhYmxlQ2xhc3M6IEZ1bmN0aW9uKTogSUNvbHVtbkRhdGFbXSB7XG4gICAgY29uc3QgY29sdW1ucyA9IHRhYmxlQ29sdW1ucy5nZXQodGFibGVDbGFzcyk7XG4gICAgaWYgKCFjb2x1bW5zKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBDYW5ub3QgZ2V0IGNvbHVtbiBkYXRhIGZyb20gJHt0YWJsZUNsYXNzLmNvbnN0cnVjdG9yLm5hbWVcbiAgICAgICAgICAgIH0sIGRpZCB5b3Ugc2V0IEBDb2x1bW4oKSBhdHRyaWJ1dGU/YFxuICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY29sdW1ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFByaW1hcnlLZXlDb2x1bW4odGFibGVDbGFzczogRnVuY3Rpb24pOiBJQ29sdW1uRGF0YSB7XG4gICAgLy8gY29uc29sZS5sb2coJ3RhYmxlQ2xhc3M6ICcsIHRhYmxlQ2xhc3MpO1xuICAgIGNvbnN0IGNvbHVtbnMgPSB0YWJsZUNvbHVtbnMuZ2V0KHRhYmxlQ2xhc3MpO1xuICAgIGlmICghY29sdW1ucykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgQ2Fubm90IGdldCBjb2x1bW4gZGF0YSBmcm9tICR7dGFibGVDbGFzcy5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgICAgICAgICB9LCBkaWQgeW91IHNldCBAQ29sdW1uKCkgYXR0cmlidXRlP2BcbiAgICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgcHJpbWFyeUtleUNvbHVtbiA9IGNvbHVtbnMuZmluZChpID0+IGkucHJpbWFyeSk7XG4gICAgaWYgKHByaW1hcnlLZXlDb2x1bW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgQ2Fubm90IGdldCBwcmltYXJ5IGtleSBjb2x1bW4gJHt0YWJsZUNsYXNzLmNvbnN0cnVjdG9yLm5hbWVcbiAgICAgICAgICAgIH0sIGRpZCB5b3Ugc2V0IEBDb2x1bW4oe3ByaW1hcnk6dHJ1ZX0pIGF0dHJpYnV0ZT9gXG4gICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBwcmltYXJ5S2V5Q29sdW1uO1xufVxuIl19